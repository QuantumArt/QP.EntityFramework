<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#+ void AddClasses(GenerationContext context){
var model = context.Model;
var settings = context.Settings;
var settings = context.Settings;
var manager = context.Manager;
#>
<#+   
	if(!settings.PlaceContentsInSeparateFiles)
    {
		 manager.StartNewFile(model.Schema.ClassName + ".Contents"+".cs");
#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
<#+       
	}
	 #>
<#+   	foreach(var content in model.Contents) { #>	
<#+    
    if(settings.PlaceContentsInSeparateFiles)
    {
		manager.StartNewFile(content.MappedName+".cs"); #>
// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
<#+   
	}
#>
namespace <#+   =System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint")#>
{

	public partial class <#+   =content.MappedName #>: IQPArticle
	{
        public <#+   =content.MappedName #>()
        {
<#+   	   	foreach(var attribute in content.Attributes.Where(x => x.IsM2M || x.IsM2O)) { #>
		    <#+   =attribute.MappedName#> = new HashSet<<#+   =attribute.RelatedContent.MappedName#>>();
<#+   		} #>
        }

        public virtual Int32 Id { get; set; }
        public virtual Int32 StatusTypeId { get; set; }
        public virtual bool Visible { get; set; }
        public virtual bool Archive { get; set; }
        public virtual DateTime Created { get; set; }
        public virtual DateTime Modified { get; set; }
        public virtual Int32 LastModifiedBy { get; set; }
        public virtual StatusType StatusType { get; set; }

<#+   	   	foreach(var attribute in content.Attributes.Where(x => !x.IsM2M && !x.IsM2O && !x.IsO2M)) { #>
		public virtual <#+   = attribute.NetType#> <#+   =attribute.MappedName#> { get; set; }
<#+   		} #>
<#+   	   	foreach(var attribute in content.Attributes.Where(x => x.IsO2M)) { #>
		/// <summary>
		/// <#+   =attribute.Description??""#>
		/// </summary>			
		public virtual <#+   = attribute.RelatedContent.MappedName#> <#+   =attribute.MappedName#> { get; set; }
<#+   		} #>
<#+   	   	foreach(var attribute in content.Attributes.Where(x => x.IsO2M)) { #>
		/// <summary>
		/// <#+   =attribute.Description??""#>
		/// </summary>
		public virtual Int32? <#+   =attribute.OriginalMappedName#> { get; set; }
<#+   		} #>
<#+   	   	foreach(var attribute in content.Attributes.Where(x => x.IsM2M || x.IsM2O)) { #>
		/// <summary>
		/// <#+   =attribute.Description??""#>
		/// </summary>		
		public virtual ICollection<<#+   =attribute.RelatedContent.MappedName#>> <#+   =attribute.MappedName#> { get; set; }
<#+   		} #>
<#+   	    if(content.Attributes.Any(x => x.GenerateLibraryUrl || x.GenerateUploadPath || x.IsNullable)) { #>		
		#region Generated Content properties
<#+   	   	foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) { #>
		// public string <#+   =attribute.MappedName#>Url { get; set; }
<#+   		} 
  		foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) { #>
		// public string <#+   =attribute.MappedName#>UploadPath { get; set; }
<#+   		} 
  		foreach(var attribute in content.Attributes.Where(x => x.IsNullable)) { #>
		// public <#+   = attribute.ExactType#> <#+   =attribute.MappedName#>Exact { get { return this.<#+   =attribute.MappedName#> == null ? default(<#+   = attribute.ExactType#>) : this.<#+   =attribute.MappedName#>.Value; } }
<#+   		} #>
		#endregion
<#+     } #>


	}
}
<#+    }#>

<#+    
}   

if(settings.GenerateExtensions && settings.GenerateClasses)
{	
	manager.StartNewFile(model.Schema.ClassName+".Contents.Extensions.cs"); #>
// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace <#+   =System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint")#>
{
<#+    foreach(var content in model.Contents) { #>
	public partial class <#+   =content.MappedName #>: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<<#+   =content.MappedName #>, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<<#+   =content.MappedName #>,  IQPFormService, string>>
		{
<#+   		foreach(var attribute in content.Attributes.Where(x => !x.IsM2O && !x.IsM2M)) { #>
			{ "<#+   =attribute.OriginalMappedName #>", new Func<<#+   =content.MappedName #>, IQPFormService, string>((self, ctx) => self.<#+   =attribute.OriginalMappedName #> != null ? <#+   
			 if(attribute.Type == "DateTime" || attribute.Type == "O2M" || attribute.Type == "Numeric" || attribute.Type == "Date" || attribute.Type == "Time") { #>self.<#+   =attribute.OriginalMappedName #>.ToString()<#+    }
			 else if(attribute.Type == "Boolean") {#>self.<#+   =attribute.OriginalMappedName #>.Value ? "1" : "0"<#+   } 
			 else if(model.Schema.ReplaceUrls && (attribute.CanContainPlaceholders)) {#>ctx.ReplacePlaceholders(self.<#+   =attribute.OriginalMappedName #>)<#+    } 
			 else { #>self.<#+   =attribute.OriginalMappedName #><#+    }#> : null) },
<#+   		} #>
		};

		#endregion
<#+   	if(content.Attributes.Any(x => x.GenerateLibraryUrl || x.GenerateUploadPath || x.IsNullable)) { #>
		#region Genarated properties
<#+   	   	foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) { #>
		public string <#+   =attribute.MappedName#>Url { get; set; }
<#+   		} 
  		foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) { #>
		public string <#+   =attribute.MappedName#>UploadPath { get; set; }
<#+   		} 
  		foreach(var attribute in content.Attributes.Where(x => x.IsNullable)) { #>
		public <#+   = attribute.ExactType#> <#+   =attribute.MappedName#>Exact { get { return this.<#+   =attribute.MappedName#> == null ? default(<#+   = attribute.ExactType#>) : this.<#+   =attribute.MappedName#>.Value; } }
<#+   		} #>
		#endregion
<#+     } #>
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
<#+   	if(model.Schema.ReplaceUrls) {	
		foreach(var attribute in content.Attributes.Where(x => x.CanContainPlaceholders)) { #>
			this.<#+   =attribute.MappedName#> = context.ReplacePlaceholders(this.<#+   =attribute.MappedName#>);
<#+   		}	
	} #>
<#+   	foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) { #>
			this.<#+   =attribute.MappedName#>Url = context.GetUrl(this.<#+   =attribute.MappedName#>, "<#+   =content.MappedName#>", "<#+   = attribute.MappedName#>");
<#+   	} #>
<#+   	foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) { #>
			this.<#+   =attribute.MappedName#>UploadPath = context.GetUploadPath(this.<#+   =attribute.MappedName#>, "<#+   =content.MappedName#>", "<#+   = attribute.MappedName#>");
<#+   	} #>
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("<#+   =content.MappedName#>", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
<#+    }#>
}
<#+   +}#>