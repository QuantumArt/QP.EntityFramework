<#@ template debug="false" hostspecific="true" language="C#" #>
<#+ void AddClassExtensions(GenerationContext context){
	var model = context.Model;
	var settings = context.Settings;
	var manager = context.Manager;
#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint")#>
{
<#+ foreach(var content in model.Contents) { #>
    public partial class <#=content.MappedName #>: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<<#=content.MappedName #>, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<<#=content.MappedName #>,  IQPFormService, string>>
        {
<#+		foreach(var attribute in content.Attributes.Where(x => !x.IsM2O && !x.IsM2M)) { #>
			{ "<#=attribute.OriginalMappedName #>", new Func<<#=content.MappedName #>, IQPFormService, string>((self, ctx) => self.<#=attribute.OriginalMappedName #> != null ? <#+
			 if(attribute.Type == "DateTime" || attribute.Type == "O2M" || attribute.Type == "Numeric" || attribute.Type == "Date" || attribute.Type == "Time") { #>self.<#=attribute.OriginalMappedName #>.ToString()<#+ }
			 else if(attribute.Type == "Boolean") {#>self.<#=attribute.OriginalMappedName #>.Value ? "1" : "0"<#+} 
			 else if(model.Schema.ReplaceUrls && (attribute.CanContainPlaceholders)) {#>ctx.ReplacePlaceholders(self.<#=attribute.OriginalMappedName #>)<#+ } 
			 else { #>self.<#=attribute.OriginalMappedName #><#+ }#> : null) },
<#+		} #>
        };

        #endregion
<#+	if(content.Attributes.Any(x => x.GenerateLibraryUrl || x.GenerateUploadPath || x.IsNullable)) { #>
        #region Genarated properties
<#+	   	foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) { #>
        public string <#=attribute.MappedName#>Url { get; set; }
<#+		} 
  		foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) { #>
        public string <#=attribute.MappedName#>UploadPath { get; set; }
<#+		} 
  		foreach(var attribute in content.Attributes.Where(x => x.IsNullable)) { #>
        public <#= attribute.ExactType#> <#=attribute.MappedName#>Exact { get { return this.<#=attribute.MappedName#> == null ? default(<#= attribute.ExactType#>) : this.<#=attribute.MappedName#>.Value; } }
<#+		} #>
        #endregion
<#+  } #>
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
<#+	if(model.Schema.ReplaceUrls) {	
		foreach(var attribute in content.Attributes.Where(x => x.CanContainPlaceholders)) { #>
			this.<#=attribute.MappedName#> = context.ReplacePlaceholders(this.<#=attribute.MappedName#>);
<#+		}	
    } #>
<#+	foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) { #>
			this.<#=attribute.MappedName#>Url = context.GetUrl(this.<#=attribute.MappedName#>, "<#=content.MappedName#>", "<#= attribute.MappedName#>");
<#+	} #>
<#+	foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) { #>
			this.<#=attribute.MappedName#>UploadPath = context.GetUploadPath(this.<#=attribute.MappedName#>, "<#=content.MappedName#>", "<#= attribute.MappedName#>");
<#+	} #>
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("<#=content.MappedName#>", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
<#+ }#>
}
<#+}#>