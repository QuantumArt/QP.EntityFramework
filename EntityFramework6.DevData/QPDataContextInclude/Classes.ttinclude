<#@ template debug="false" hostspecific="true" language="C#" #>
<#+ void AddClasses(GenerationContext context){
var model = context.Model;
var settings = context.Settings;
var manager = context.Manager;
#>
<#+
	if(!settings.PlaceContentsInSeparateFiles)
    {
#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
<#+
	}
	 #>
<#+  foreach(var content in model.Contents) { #>
<#+
    if(settings.PlaceContentsInSeparateFiles)
    {
#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
<#+
	}
#>
namespace <#=manager.DefaultProjectNamespace#>
{
    public partial class <#=content.MappedName #>: IQPArticle
    {
        public <#=content.MappedName #>()
        {
<#+	   	foreach(var attribute in content.Attributes.Where(x => x.IsM2M || x.IsM2O)) { #>
		    <#=attribute.MappedName#> = new HashSet<<#=attribute.RelatedContent.MappedName#>>();
<#+		} #>
        }

        public virtual Int32 Id { get; set; }
        public virtual Int32 StatusTypeId { get; set; }
        public virtual bool Visible { get; set; }
        public virtual bool Archive { get; set; }
        public virtual DateTime Created { get; set; }
        public virtual DateTime Modified { get; set; }
        public virtual Int32 LastModifiedBy { get; set; }
        public virtual StatusType StatusType { get; set; }

<#+     foreach(var attribute in content.Attributes.Where(x => !x.IsM2M && !x.IsM2O && !x.IsO2M)) { #>
        public virtual <#= attribute.NetType#> <#=attribute.MappedName#> { get; set; }
<#+		} #>
<#+	   	foreach(var attribute in content.Attributes.Where(x => x.IsO2M)) { #>
		/// <summary>
		/// <#=attribute.Description??""#>
		/// </summary>
		public virtual <#= attribute.RelatedContent.MappedName#> <#=attribute.MappedName#> { get; set; }
<#+		} #>
<#+	   	foreach(var attribute in content.Attributes.Where(x => x.IsO2M)) { #>
		/// <summary>
		/// <#=attribute.Description??""#>
		/// </summary>
		public virtual Int32? <#=attribute.OriginalMappedName#> { get; set; }
<#+		} #>
<#+	   	foreach(var attribute in content.Attributes.Where(x => x.IsM2M || x.IsM2O)) { #>
		/// <summary>
		/// <#=attribute.Description??""#>
		/// </summary>
		public <#+ if( settings.ProxyCreationEnabled ) { #> virtual <#+}#> ICollection<<#=attribute.RelatedContent.MappedName#>> <#=attribute.MappedName#> { get; set; }
<#+		} #>

	}
}

<#+
    if(settings.PlaceContentsInSeparateFiles)
    {
		context.SaveOutput(content.MappedName + ".cs");
	}
#>
<#+}#>
<#+	if(!settings.PlaceContentsInSeparateFiles)
    {
		context.SaveOutput(model.Schema.ClassName + ".Contents"+".cs");
	}
#>

<#+}#>
