<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#+

// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
		public IContentProcessor ContentProcessor;

		public string ProcessContent(string content)
		{
			if (ContentProcessor == null)
			{
				return content;
            }
			else
			{
				return ContentProcessor.Process(content);
            }
        }
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void StartNewFile(String name) {
       StartNewFile(name, null);
    }

	 public void StartNewFile(String name, IContentProcessor contentProcessor) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name, ContentProcessor = contentProcessor };
    }

	public string LoadFile(String name, IContentProcessor contentProcessor) {
		if (name == null)
            throw new ArgumentNullException("name");

	   var path = host.ResolvePath(name);
	   StartNewFile(Path.GetFileName(path), contentProcessor);
	   var content = File.ReadAllText(path);	   
	   template.Append(content);
       return content;
    }	

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
			headerText = header.ProcessContent(headerText);
            String footerText = template.ToString(footer.Start, footer.Length);
			footerText = footer.ProcessContent(footerText);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
				content = block.ProcessContent(content);
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
            foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
            foreach(var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach(String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
}

interface IContentProcessor
{
	string Process(string content);
}

class EmptyProcessor : IContentProcessor
{
	public string Process(string content)
	{
		return content;
    }
}

class DefaultNamespaceProcessor : IContentProcessor
{
	private static Regex NamespaceRegex = new Regex(@"(namespace)\s*(.*)\s*(\r\n)", RegexOptions.Compiled);

	public string Process(string content)
	{
		var defaultNamespace = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
		return NamespaceRegex.Replace(content, "$1 " + defaultNamespace +"$3");
    }
}

class FlatternTemplateProcessor : IContentProcessor
{
	private const string ReplaceTemplate = @"$1{0}$3$4";
	private static Regex IncludeRegex = new Regex(@"(#@\s*include\s+file="")(.*)(\\[^\\]*)(""\s*#)", RegexOptions.Compiled);
	private static Regex CodeFileRegex = new Regex(@"(AddCodeFile\(@?"")(.*)(\\[^\\""]*)("")", RegexOptions.Compiled);

	private readonly string _template;

	public FlatternTemplateProcessor(string template)
	{
		_template = string.Format(ReplaceTemplate, template);
    }

	public string Process(string content)
	{
		foreach(var re in new[] {IncludeRegex, CodeFileRegex})
		{
			content = re.Replace(content, _template);
        }
		return content;
    }
}

class GenerationContext : IDisposable
{
	public EDMXSettings Settings { get; private set; }
	public ModelReader Model { get; private set; }
	public Manager Manager { get; private set; }
	public bool UsePartialUpdate { get; private set; }

	public GenerationContext(TextTransformation transformation, ITextTemplatingEngineHost host, StringBuilder content, string settingsFile)
	{
	
		UsePartialUpdate = false;
		Settings = EDMXSettings.Parse(host.ResolvePath(settingsFile));
		Manager = Manager.Create(host, content);

		var mappingFile = host.ResolvePath(Settings.QPContextMappingResultPath);
		Model = new ModelReader(mappingFile, text => transformation.WriteLine(text), true);
		List<ModelReader> models = new List<ModelReader>();
		Model.Schema.LazyLoadingEnabled = Settings.LazyLoadingEnabled;
		Model.Schema.IsStageMode = true;
		Model.Schema.ConnectionStringName = Settings.UseContextNameAsConnectionString ? Model.Schema.ClassName : Model.Schema.ConnectionStringName;
		
		transformation.WriteLine("ClassName:  " + Model.Schema.ClassName);
		transformation.WriteLine("ConnectionStringName:  " + Model.Schema.ConnectionStringName);
    }

	public void AddTemplateFile(string fileName, Action<GenerationContext> addFile, bool condition = true)
	{
		if (condition)
        {
			Manager.StartNewFile(fileName);
			addFile(this);
        }
    }

	public void AddTemplate(Action<GenerationContext> addFile, bool condition = true)
	{
		if (condition)
        {
			addFile(this);
        }
    }

	public void AddCodeFile(string fileName, bool condition = true)
    {
		if (condition)
        {
			Manager.LoadFile(fileName, new DefaultNamespaceProcessor());
        }
    }

	public void Dispose()
	{
		Manager.Process(true);
    }
}

class NugetContext : IDisposable
{
	private static Regex IncludeRegex = new Regex(@"#@\s*include\s+file=""(.*\\[^\\]*)""\s*#", RegexOptions.Compiled);
	private static Regex CodeFileRegex = new Regex(@"AddCodeFile\(@?""(.*)""", RegexOptions.Compiled);

	public Manager Manager { get; private set; }
	public string Version { get; set; }
	public string PackageName { get; set; }
	public string PackageSource { get; set; }
	public List<string> Files { get; private set; }

	public NugetContext(ITextTemplatingEngineHost host, StringBuilder content)
    {
		Manager = Manager.Create(host, content);
		Files = new List<string>();
    }

	public void AddTemplateFile(string fileName, Action<NugetContext> addFile)
	{
		Manager.StartNewFile(fileName);
		addFile(this);
    }

	public void FlatternTemplate(string path)
	{
		var processor = new FlatternTemplateProcessor(string.Format(@"..\packages\{0}.{1}\include", PackageName, Version));
		var content = Manager.LoadFile(path, processor);

		foreach (Regex re in new[] { IncludeRegex, CodeFileRegex })
        {
            foreach (Match match in re.Matches(content))
            {
                var file = match.Groups[1].Value;
                Files.Add(file);
            }
        }
    }

	public void Dispose()
	{
		Manager.Process(true);
    }
}
#>